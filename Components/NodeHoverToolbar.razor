@using MiniWorkflowBuilder.Models
@using MiniWorkflowBuilder.Services
@inject DiagramCreatorService Creator
@inject IJSRuntime JsRuntime

<div class="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-white border border-gray-200 rounded-lg shadow-lg px-2 py-1 flex items-center gap-1 z-50" role="toolbar" aria-label="Node actions toolbar">
    <button @onclick="@HandleRun"
            class="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded transition-colors duration-200"
            title="Run"
            aria-label="Run node">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
        </svg>
    </button>

    <button @onclick="@HandleDuplicate"
            class="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors duration-200"
            title="Duplicate"
            aria-label="Duplicate node">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
    </button>

    <button @onclick="@HandleDelete"
            class="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded transition-colors duration-200"
            title="Delete"
            aria-label="Delete node">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
        </svg>
    </button>

    <div class="relative">
        <button @onclick="@ToggleMoreMenu"
                class="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded transition-colors duration-200"
                title="More"
                aria-label="More options"
                aria-expanded="@_showMoreMenu"
                aria-haspopup="true">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
            </svg>
        </button>

        @if (_showMoreMenu)
        {
            <div class="absolute top-full left-0 mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-60" role="menu" aria-label="Additional node actions">
                <button @onclick="@HandleRename"
                        class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        role="menuitem"
                        aria-label="Rename node">
                    Rename
                </button>
                <button @onclick="@HandleConfigureRunAfter"
                        class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        role="menuitem"
                        aria-label="Configure run after settings">
                    Configure run after
                </button>
                <button @onclick="@HandleConfigureContext"
                        class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        role="menuitem"
                        aria-label="Configure node context">
                    Configure context
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public BaseNode Node { get; set; } = null!;
    [Parameter] public EventCallback<BaseNode> OnNodeDeleted { get; set; }
    [Parameter] public EventCallback<BaseNode> OnNodeDuplicated { get; set; }
    [Parameter] public EventCallback<BaseNode> OnNodeRun { get; set; }

    private bool _showMoreMenu;

    private void ToggleMoreMenu()
    {
        _showMoreMenu = !_showMoreMenu;
        StateHasChanged();
    }

    private async Task HandleRun()
    {
        await OnNodeRun.InvokeAsync(Node);
        await NotifyAction("Running node: " + Node.Title);
    }

    private async Task HandleDuplicate()
    {
        await OnNodeDuplicated.InvokeAsync(Node);
        await NotifyAction("Duplicated node: " + Node.Title);
    }

    private async Task HandleDelete()
    {
        if (await ConfirmAction($"Are you sure you want to delete '{Node.Title}'?"))
        {
            Creator.Diagram.Nodes.Remove(Node);
            await OnNodeDeleted.InvokeAsync(Node);
            await NotifyAction("Deleted node: " + Node.Title);
        }
    }

    private async Task HandleRename()
    {
        _showMoreMenu = false;
        var newName = await PromptForInput("Enter new name:", Node.Title);
        if (!string.IsNullOrWhiteSpace(newName) && newName != Node.Title)
        {
            Node.Title = newName;
            await NotifyAction($"Renamed node to: {newName}");
        }
    }

    private async Task HandleConfigureRunAfter()
    {
        _showMoreMenu = false;
        await NotifyAction("Configure run after - Feature coming soon!");
    }

    private async Task HandleConfigureContext()
    {
        _showMoreMenu = false;
        await NotifyAction("Configure context - Feature coming soon!");
    }

    private async Task<bool> ConfirmAction(string message)
    {
        return await JsRuntime.InvokeAsync<bool>("confirm", message);
    }

    private async Task<string> PromptForInput(string message, string defaultValue)
    {
        var result = await JsRuntime.InvokeAsync<string>("prompt", message, defaultValue ?? "");
        return result ?? "";
    }

    private async Task NotifyAction(string message)
    {
        await JsRuntime.InvokeVoidAsync("console.log", message);
        // Could also show a toast notification here
    }

    // Close more menu when clicking outside
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _showMoreMenu)
        {
            await JsRuntime.InvokeVoidAsync("addEventListener", "click", DotNetObjectReference.Create(this), "handleOutsideClick");
        }
    }

    [JSInvokable]
    public void HandleOutsideClick()
    {
        if (_showMoreMenu)
        {
            _showMoreMenu = false;
            StateHasChanged();
        }
    }
}
