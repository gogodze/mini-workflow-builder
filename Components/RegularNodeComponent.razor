@using MiniWorkflowBuilder.Models
@using MiniWorkflowBuilder.Services
@inject NodeEventService Events
@inject DiagramCreatorService Creator

<div class="relative node-container" @onmouseenter="@OnMouseEnter" @onmouseleave="@OnMouseLeave">
    <div class="w-16 h-16 bg-gray-100 hover:bg-gray-200 border border-gray-300/75 rounded-full flex items-center justify-center cursor-pointer transition-colors shadow-md"
         @onclick="HandleClick"
         role="button"
         tabindex="0"
         aria-label="Regular workflow node: @Node.Title"
         @onkeydown="HandleKeyDown">
        <h5 class="text-sm font-bold text-gray-900">@Node.Title</h5>
        @foreach (var port in Node.Ports)
        {
            <PortRenderer Port="port" />
        }
    </div>


    @if (_showHoverToolbar)
    {
        <div @onmouseenter="@OnToolbarMouseEnter" @onmouseleave="@OnToolbarMouseLeave">
            <NodeHoverToolbar Node="Node"
                            OnNodeDeleted="HandleNodeDeleted"
                            OnNodeDuplicated="HandleNodeDuplicated"
                            OnNodeRun="HandleNodeRun"/>
        </div>
    }
</div>

@code {
    [Parameter] public RegularNode Node { get; set; } = null!;
    [Parameter] public EventCallback<RegularNode> OnNodeClick { get; set; }

    private bool _showHoverToolbar;
    private bool _isHoveringNode;
    private bool _isHoveringToolbar;

    private void HandleClick()
    {
        Events.RaiseNodeClicked(Node);
    }

    private void OnMouseEnter()
    {
        _isHoveringNode = true;
        _showHoverToolbar = true;
        StateHasChanged();
    }

    private void OnMouseLeave()
    {
        _isHoveringNode = false;
        Task.Delay(100).ContinueWith(_ =>
        {
            if (!_isHoveringNode && !_isHoveringToolbar)
            {
                _showHoverToolbar = false;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    private void OnToolbarMouseEnter()
    {
        _isHoveringToolbar = true;
    }

    private void OnToolbarMouseLeave()
    {
        _isHoveringToolbar = false;
        Task.Delay(100).ContinueWith(_ =>
        {
            if (!_isHoveringNode && !_isHoveringToolbar)
            {
                _showHoverToolbar = false;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    private Task HandleNodeDeleted(BaseNode node)
    {
        Creator.DeleteNode(node);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleNodeDuplicated(BaseNode node)
    {
        Creator.DuplicateNode(node);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleNodeRun(BaseNode node)
    {
        Console.WriteLine($"Running regular node: {node.Title}");
        return Task.CompletedTask;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            await Task.Run(() => HandleClick());
        }
    }
}
