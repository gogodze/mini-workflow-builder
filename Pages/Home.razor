@page "/"
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models.Base
@using MiniWorkflowBuilder.Models
@using MiniWorkflowBuilder.Services
@inject DiagramCreatorService Creator
@inject NodeEventService Events
@inject IJSRuntime Js


@inject HttpClient Client

<div class="canvas-background justify-center w-full">
    <div class="flex flex-col items-center h-full w-full">
        <TopBar/>
        <div @ref="diagramWrapper"
             @ondragover:preventDefault="true"
             @ondrop:preventDefault="true"
             @ondragover="OnDragOver"
             @ondrop="OnDrop"
             class="flex items-center justify-center w-full h-full">
            @if (Creator.Diagram != null)
            {
                <CascadingValue Value="Creator.Diagram">
                    <DiagramCanvas/>
                </CascadingValue>
            }
        </div>

    </div>
</div>

@code
{
    public class WorkflowBundle
    {
        public Workflow Workflow { get; set; } = null!;

        public Application Application { get; set; } = null!;
    }

    private DiagramCanvas diagramCanvas;
    private ElementReference diagramWrapper;
    private BaseNode? SelectedNode;
    [CascadingParameter] private string? _draggedNodeType { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var workflowBundle = await Client.GetFromJsonAsync<WorkflowBundle>("sample-workflow.json");
        Creator.CreateNodes(workflowBundle!.Workflow, workflowBundle.Application);
    }

    private void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    private async Task OnDrop(DragEventArgs e)
    {
        if (string.IsNullOrEmpty(_draggedNodeType))
            return;

        var rect = await Js!.InvokeAsync<BoundingClientRect>("getBoundingClientRect", diagramWrapper);

        var x = e.ClientX - rect.Left;
        var y = e.ClientY - rect.Top;

        NodeModel newNode = _draggedNodeType switch
        {
            "loop" => new LoopNode(new Point(x, y))
            {
                Title = "Loop Node",
            },
            "regular" => new RegularNode(new Point(x, y))
            {
                Title = "Regular Node",
            },
            "if" => new IfNode(new Point(x, y))
            {
                Title = "If Node",
            },
            _ => new RegularNode(new Point(x, y))
            {
                Title = "Regular Node",
            },
        };

        Creator.Diagram.Nodes.Add(newNode);
        StateHasChanged();
    }
}
