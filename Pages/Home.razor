@page "/"
@using Blazor.Diagrams.Core.Geometry
@using MiniWorkflowBuilder.Models
@using MiniWorkflowBuilder.Services
@inject DiagramCreatorService Creator
@inject IJSRuntime Js
@inject HttpClient Client


<main aria-label="node editor" @ref="_diagramWrapper"
     @ondragover:preventDefault="true"
     @ondrop:preventDefault="true"
     @ondragover="@OnDragOver"
     @ondrop="@OnDrop"
     class="flex items-center justify-center w-full h-full">
    @if (Creator.Diagram != null)
    {
        <CascadingValue Value="Creator.Diagram">
            <DiagramCanvas/>
        </CascadingValue>
    }
</main>

@code
{


    private ElementReference _diagramWrapper;
    private BaseNode? _selectedNode;
    [CascadingParameter] private string? _draggedNodeType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WorkflowBundle? workflowBundle;

        var workflowBundleFromLs = await Js.InvokeAsync<string?>("localStorage.getItem", "workflow-nodes");
        if (!string.IsNullOrWhiteSpace(workflowBundleFromLs))
        {
            try
            {
                workflowBundle = JsonSerializer.Deserialize<WorkflowBundle>(workflowBundleFromLs);
            }
            catch (JsonException ex)
            {
                Console.WriteLine(ex);
                workflowBundle = await Client.GetFromJsonAsync<WorkflowBundle>("sample-workflow.json");
            }
        }
        else
        {
            workflowBundle = await Client.GetFromJsonAsync<WorkflowBundle>("sample-workflow.json");
        }

        Creator.CreateNodes(workflowBundle!.Workflow, workflowBundle.Application);
    }

    private void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    private async Task OnDrop(DragEventArgs e)
    {
        if (string.IsNullOrEmpty(_draggedNodeType))
            return;

        var rect = await Js!.InvokeAsync<BoundingClientRect>("getBoundingClientRect", _diagramWrapper);

        var x = e.ClientX - rect.Left;
        var y = e.ClientY - rect.Top;

        NodeModel newNode = _draggedNodeType switch
        {
            "loop" => new LoopNode(new Point(x, y))
            {
                Title = "Loop Node",
            },
            "regular" => new RegularNode(new Point(x, y))
            {
                Title = "Regular Node",
            },
            "if" => new IfNode(new Point(x, y))
            {
                Title = "If Node",
            },
            _ => new RegularNode(new Point(x, y))
            {
                Title = "Regular Node",
            },
        };

        Creator.Diagram.Nodes.Add(newNode);

        StateHasChanged();
    }
}
